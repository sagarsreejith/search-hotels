{"version":3,"sources":["types/index.ts","types/enums.ts","env.ts","services/Api.ts","appConstants.ts","components/common/empty-result/EmptyResult.tsx","helpers/moment.ts","helpers/hotel-list.ts","components/hotels/filters/HotelFilters.tsx","components/hotels/details-card/DetailsCard.tsx","components/hotels/hotel-list/HotelList.tsx","components/hotels/search/SearchForm.tsx","components/hotels/Hotels.tsx","components/common/loader/ScssLoader.tsx","App.tsx","initialSate.ts","store.ts","reducers/RootReducer.ts","index.tsx","actions/RootActions.ts"],"names":["ActionsEnum","apiHeaders","apiUrls","listOfHotels","getHotels","a","axios","get","headers","APP_CONSTANTS","NAME","PRICE","CITY","CURRENCY_CODE","FROM","TO","INPUT_PLACE_HOLDER","SORT_BY_NAME","SORT_BY_PRICE","EmptyResult","className","Component","addDays","date","numberOfDays","moment","add","format","toString","toDateIsVaid","fromDate","toDate","isSameOrAfter","filterHotelListbasedOnAvailableDate","hotelList","filter","hotel","available_on","getNumberOfNight","diff","filterHotelListByHotelFilters","name","price","parseInt","toLowerCase","includes","filterCondition","dynamicSortWithKey","property","sortOrder","substr","b","localeCompare","HotelFilter","state","dispatch","useDispatch","hotelNmae","filters","hotelName","maxPrice","length","reduce","prev","next","minPrice","getMinPriceFromHotelList","updateFilter","event","filterByType","target","value","hotelPrice","updateFilters","src","alt","type","id","placeholder","defaultValue","onChange","e","min","max","step","HotelDetails","props","totalNights","city","HotelList","appState","hotels","sortBy","sort","sortHoletListByNamePrice","getSortedHotelList","map","index","totalNumberOfNigts","updateSortbyByNamePrice","updateSortBy","onClick","SearchFrom","useEffect","setToDate","UPDATE_TO_DATE","payload","UPDATE_FROM_DATE","readOnly","disabled","getHotelList","Hotels","useSelector","emptyResult","isLoading","ScssLoader","App","loader","error","message","InitialState","hasError","persistConfig","key","storage","localforage","persistedReducer","persistReducer","action","NETWORK_ERROR","UPDATE_HOTEL_LIST","UPDATE_FILTERS","UPDATE_SORT_BY","SHOW_LOADER","loaderStatus","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","isShowLoader","apiResponse","eval","data"],"mappings":"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","file":"static/js/main.18b17adf.chunk.js","sourcesContent":["\nexport * from './state';\nexport * from './api';\nexport * from './enums';\nexport * from './actions';\nexport * from './hotel';\n","/**\n * \n * `ActionsEnum` will define the Actions\n * \n */\nexport enum ActionsEnum {\n  NETWORK_ERROR = 'NETWORK_ERROR',\n  UPDATE_FROM_DATE = 'UPDATE_FROM_DATE',\n  UPDATE_TO_DATE = 'UPDATE_TO_DATE',\n  UPDATE_HOTEL_LIST = 'UPDATE_HOTEL_LIST',\n  SHOW_LOADER = 'SHOW_LOADER',\n  UPDATE_FILTERS = 'UPDATE_FILTERS',\n  UPDATE_SORT_BY =  'UPDATE_SORT_BY'\n}\n\n\n","/**\n *\n * `apiBaseUrl` exports apiBaseUrl for network call.\n *\n */\nexport const apiBaseUrl: string =\n  'https://www.mocky.io/v2';\n\n/**\n *\n * `apiHeaders` exports Axios API header for calling API\n *\n */\nexport const apiHeaders = {\n    'Content-type': 'application/json'\n};\n\n/**\n *\n * `apiUrls` const exports apiUrl.\n *\n */\nexport const apiUrls = {\n  listOfHotels: `${apiBaseUrl}/5eb8fcb12d0000d088357f2a`,\n};\n","import axios from 'axios';\nimport { apiHeaders, apiUrls } from '../env';\nimport {\n  GenericApiResponse,\n  Hotel,\n} from '../types';\n\n/**\n *\n * Async function will call the hotel list API.\n *\n *\n * @retruns Promise<GenericApiResponse<Hotel[]>>>\n */\nexport const getHotels = async () => {\n  return axios.get<\n    GenericApiResponse<Hotel[]>\n  >(`${apiUrls.listOfHotels}`, {\n    headers: apiHeaders,\n  });\n};\n","export const APP_CONSTANTS = {\n  HOTEL_DETAILS: {\n    NAME: 'Name: ',\n    PRICE: 'Price: ',\n    CITY: 'City: ',\n    CURRENCY_CODE: 'AED'\n  },\n  SEARCH: {\n    FROM: 'From: ',\n    TO: 'To: '\n  },\n  EMPTY_RESULT: 'No record found!',\n  NETWORK_ERROR_MESSAGE:\n    'Its not you, its us. Please try after sometime.',\n  LOADING: 'Loading....',\n  DATE_FORMAT: 'yyyy-MM-DD',\n  TOTAL_NO_OF_NIGHTS: 'Total Nights: ',\n  HOTEL_FILTERS: {\n    NAME: 'name',\n    PRICE: 'price',\n    INPUT_PLACE_HOLDER: 'Enter Hotel Name'\n  },\n  SORT_BY: {\n    NAME: 'name',\n    PRICE: 'price'\n  },\n  SORT_BY_LABELS: {\n    SORT_BY_NAME : 'Sort By Name',\n    SORT_BY_PRICE : 'Sort By Price',\n  }\n};\n","import React, { Component } from 'react';\nimport { APP_CONSTANTS } from '../../../appConstants';\nimport './EmptyResult.scss';\n\n/**\n *\n * `EmptyResult` is class component to show when the result \n * come as empty fro  remote.\n *\n * @return {JSX.Element}\n *\n */\nclass EmptyResult extends Component {\n  render() {\n    return (\n      <div className='empty-result'>\n        <h1>{APP_CONSTANTS.EMPTY_RESULT}</h1>\n      </div>\n    );\n  }\n}\n\nexport default EmptyResult;\n","import moment from 'moment';\nimport { APP_CONSTANTS } from '../appConstants';\nimport { Hotel } from '../types';\n\n/**\n *\n * `getToday` function  return the current date.\n *\n * @returns {string} as currenet date.\n *\n */\nexport const getToday = (): string => {\n  return moment().format(\n    APP_CONSTANTS.DATE_FORMAT\n  );\n};\n\n/**\n *\n * `addDays` function  will add days to\n * a giver dates.\n *\n * @param {string} date as first param\n *\n * @returns {string} as added dates.\n *\n */\nexport const addDays = (\n  date: string,\n  numberOfDays: number\n): string => {\n  return moment(\n    date,\n    APP_CONSTANTS.DATE_FORMAT\n  )\n    .add(numberOfDays, 'days')\n    .format(APP_CONSTANTS.DATE_FORMAT)\n    .toString();\n};\n\n/**\n *\n * `toDateIsVaid` function validates\n * todates is greater than fromDates or not.\n *\n * @param {string} fromDate as first param\n * @param {string} toDate as second param\n *\n * @returns {boolean} true/false\n *\n */\nexport const toDateIsVaid = (\n  fromDate: string,\n  toDate: string\n): boolean => {\n  return moment(toDate).isSameOrAfter(\n    fromDate\n  );\n};\n\n/**\n *\n * `filterHotelListbasedOnAvailableDate` function\n * filter the hotel list based on from date and hotel \n * available_on date.\n * \n * @param {Hotel[]} hotelList as first param\n * @param {string} fromDate as second param\n *\n * @returns {number} as totalNight\n *\n */\nexport const filterHotelListbasedOnAvailableDate = (\n  hotelList: Hotel[],\n  fromDate: string\n): Hotel[] => {\n  return hotelList.filter((hotel) => {\n    return moment(\n      moment(\n        hotel?.available_on\n      ).format(\n        APP_CONSTANTS.DATE_FORMAT\n      )\n    ).isSameOrAfter(fromDate);\n  });\n};\n\n/**\n *\n * `getNumberOfNight` function\n * find the differancee between two\n * dates and return the total nights.\n *\n * @param {string} fromDate as first param\n * @param {string} toDate as second param\n *\n * @returns {number} as totalNight\n *\n */\nexport const getNumberOfNight = (\n  fromDate: string,\n  toDate: string\n): number => {\n  return moment(toDate).diff(\n    moment(fromDate),\n    'days'\n  );\n};\n","import { Hotel } from '../types';\n\n/**\n *\n * `getMaxPriceFromHotelList` function\n * finds the max price hotel obect from hotel list.\n *\n * @param {Hotel[]} hotelList as first param\n *\n * @returns {Hotel} as result\n *\n */\nexport const getMaxPriceFromHotelList = (\n  hotelList: Hotel[]\n): Hotel => {\n  return hotelList.reduce(\n    (prev, next) => {\n      return parseInt(next?.price) <=\n        parseInt(prev?.price)\n        ? prev\n        : next;\n    }\n  );\n};\n\n/**\n *\n * `getMinPriceFromHotelList` function\n * finds the min price hotel obect from hotel list.\n *\n * @param {Hotel[]} hotelList as first param\n *\n * @returns {Hotel} as result\n *\n */\nexport const getMinPriceFromHotelList = (\n  hotelList: Hotel[]\n): Hotel => {\n  return hotelList.reduce(\n    (prev, next) => {\n      return parseInt(next?.price) >=\n        parseInt(prev?.price)\n        ? prev\n        : next;\n    }\n  );\n};\n\n/**\n *\n * `filterHotelListByHotelFilters` function\n * will filter hotel arrays based on filters.\n *\n * @param {Hotel[]} hotelList as first param\n * @param {string} name as second param\n * @param {string} price as third param\n *\n * @returns {Hotel[]}\n *\n */\nexport const filterHotelListByHotelFilters = (\n  hotelList: Hotel[],\n  name: string,\n  price: string\n): Hotel[] => {\n  const filterCondition = (\n    hotel: Hotel\n  ): boolean => {\n    switch (true) {\n      case name !== '' && price !== '':\n        return (\n          parseInt(hotel?.price) <=\n            parseInt(price) &&\n          hotel?.name\n            .toLowerCase()\n            .includes(\n              name.toLowerCase()\n            )\n        );\n      case price !== '':\n        return (\n          parseInt(hotel?.price) <=\n          parseInt(price)\n        );\n      case name !== '':\n        return hotel?.name\n          .toLowerCase()\n          .includes(name.toLowerCase());\n      default:\n        return true;\n    }\n  };\n  return hotelList.filter((hotel) =>\n    filterCondition(hotel)\n  );\n};\n\n/**\n *\n * `sortHoletListByNamePrice` function\n * will sort hotel arrays based on sort key.\n *\n * @param {Hotel[]} hotelList as first param\n * @param {string} sortBy as second param\n *\n * @returns {Hotel[]}\n *\n */\nexport const sortHoletListByNamePrice = (\n  hotelList: Hotel[],\n  sortBy: string\n): Hotel[] => {\n  return hotelList.sort(\n    dynamicSortWithKey(sortBy)\n  );\n};\n\n/**\n * Function to sort alphabetically\n * an array of objects by some specific key.\n *\n * @param {String} property Key of the object to sort.\n */\nconst dynamicSortWithKey = (\n  property: string\n) => {\n  var sortOrder = 1;\n\n  if (property[0] === '-') {\n    sortOrder = -1;\n    property = property.substr(1);\n  }\n\n  return (a: any, b: any) => {\n    if (sortOrder == -1) {\n      return b[property].localeCompare(\n        a[property]\n      );\n    } else {\n      return a[property].localeCompare(\n        b[property]\n      );\n    }\n  };\n};\n","import { ChangeEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateFilters } from '../../../actions/RootActions';\nimport { APP_CONSTANTS } from '../../../appConstants';\nimport {\n  getMaxPriceFromHotelList,\n  getMinPriceFromHotelList,\n} from '../../../helpers';\nimport {\n  AppState,\n  Filters,\n} from '../../../types';\nimport './HotelFilters.scss';\n\nexport const HotelFilter = (\n  state: AppState\n) => {\n  const dispatch = useDispatch();\n  const hotelNmae =\n    state?.filters?.hotelName;\n  const maxPrice =\n    state?.hotelList?.length > 0\n      ? parseInt(\n          getMaxPriceFromHotelList(\n            state?.hotelList\n          )?.price\n        )\n      : 0;\n  const minPrice =\n    state?.hotelList?.length > 0\n      ? parseInt(\n          getMinPriceFromHotelList(\n            state?.hotelList\n          )?.price\n        )\n      : 0;\n\n  /**\n   *\n   * `updateFilter` function dispatch\n   * and event to the action creator\n   * based on the input param.\n   *\n   * @param {ChangeEvent<HTMLInputElement>} event as first param\n   * @param {string} filterByType as second param\n   *\n   * @returns {void}\n   *\n   */\n  const updateFilter = (\n    event: ChangeEvent<HTMLInputElement>,\n    filterByType: string\n  ): void => {\n    const hotelName =\n      filterByType ===\n      APP_CONSTANTS.HOTEL_FILTERS.NAME\n        ? event?.target?.value\n        : state?.filters?.hotelName;\n    const hotelPrice =\n      filterByType ===\n      APP_CONSTANTS.HOTEL_FILTERS.PRICE\n        ? event?.target?.value === '0'\n          ? ''\n          : event?.target?.value\n        : state?.filters?.hotelPrice;\n    const filters = {\n      hotelName,\n      hotelPrice,\n    } as Filters;\n    dispatch(updateFilters(filters));\n  };\n\n  return (\n    <div className='filter-section'>\n      <div>\n      <img src=\"assets/images/search-icon.svg\" alt=\"\" />\n        <input\n          type='text'\n          name='hotel-name'\n          id='hotel-name'\n          placeholder={\n            APP_CONSTANTS.HOTEL_FILTERS\n              .INPUT_PLACE_HOLDER\n          }\n          defaultValue={hotelNmae}\n          onChange={(e) =>\n            updateFilter(\n              e,\n              APP_CONSTANTS\n                .HOTEL_FILTERS.NAME\n            )\n          }\n        />\n      </div>\n      <div>\n        <input\n          type='range'\n          id='hotel-price'\n          name='hotel-price'\n          min={minPrice}\n          max={maxPrice}\n          step='1'\n          onChange={(e) =>\n            updateFilter(\n              e,\n              APP_CONSTANTS\n                .HOTEL_FILTERS.PRICE\n            )\n          }\n        ></input>\n      </div>\n    </div>\n  );\n};\n","import { APP_CONSTANTS } from '../../../appConstants';\nimport { HotelDetailsProps } from '../../../types';\nimport './DetailsCard.scss';\n\nexport const HotelDetails = (\n  props: HotelDetailsProps\n) => {\n  return (\n    <div className='details-card'>\n      <div className='hotel-name'>\n        <strong>\n          {\n            APP_CONSTANTS.HOTEL_DETAILS\n              .NAME\n          }\n        </strong>\n        {props?.hotel?.name}\n      </div>\n      <div className='hotel-price'>\n        <strong>\n          {\n            APP_CONSTANTS.HOTEL_DETAILS\n              .PRICE\n          }\n        </strong>\n        {parseInt(props?.hotel.price) *\n          props?.totalNights}{' '}\n        {\n          APP_CONSTANTS.HOTEL_DETAILS\n            .CURRENCY_CODE\n        }\n      </div>\n      <div className='hotel-city'>\n        <strong>\n          {\n            APP_CONSTANTS.HOTEL_DETAILS\n              .CITY\n          }\n        </strong>\n        {props?.hotel.city}\n      </div>\n    </div>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { updateSortBy } from '../../../actions/RootActions';\nimport { APP_CONSTANTS } from '../../../appConstants';\nimport {\n  filterHotelListByHotelFilters,\n  sortHoletListByNamePrice,\n} from '../../../helpers';\nimport {\n  AppState,\n  Hotel,\n} from '../../../types';\nimport { HotelDetails } from '../details-card/DetailsCard';\nimport './HotelList.scss';\n\nexport const HotelList = (\n  appState: AppState\n) => {\n  const dispatch = useDispatch();\n  const getSortedHotelList = (): Hotel[] => {\n    const sortBy = appState?.sortBy\n      ?.name\n      ? APP_CONSTANTS.SORT_BY.NAME\n      : APP_CONSTANTS.SORT_BY.PRICE;\n    return sortHoletListByNamePrice(\n      filterHotelListByHotelFilters(\n        appState?.hotelList,\n        appState?.filters?.hotelName,\n        appState?.filters?.hotelPrice\n      ),\n      sortBy\n    );\n  };\n  const hotels =\n    appState?.filters?.hotelName ||\n    appState?.filters?.hotelPrice ||\n    appState?.sortBy?.name ||\n    appState?.sortBy?.price\n      ? appState?.sortBy?.name ||\n        appState?.sortBy?.price\n        ? getSortedHotelList()\n        : filterHotelListByHotelFilters(\n            appState?.hotelList,\n            appState?.filters\n              ?.hotelName,\n            appState?.filters\n              ?.hotelPrice\n          )\n      : appState?.hotelList;\n\n  const hotelList = hotels?.map(\n    (\n      hotel: Hotel,\n      index: number\n    ): JSX.Element => {\n      return (\n        <HotelDetails\n          key={index}\n          hotel={hotel}\n          totalNights={\n            appState?.totalNumberOfNigts\n          }\n        ></HotelDetails>\n      );\n    }\n  );\n\n  /**\n   *\n   * `updateSortbyByNamePrice` function will call\n   * sort helper function based on sortBy key.\n   *\n   * @param {string} sortBy as first param\n   *\n   * @returns {void}\n   *\n   */\n  const updateSortbyByNamePrice = (\n    sortBy: string\n  ): void => {\n    dispatch(updateSortBy(sortBy));\n  };\n\n  return (\n    <div>\n      <div className='sort-section'>\n        <div>\n          <strong>\n            {\n              APP_CONSTANTS.TOTAL_NO_OF_NIGHTS\n            }{' '}\n            {\n              appState.totalNumberOfNigts\n            }{' '}\n          </strong>\n        </div>\n        <div className='sort-button'>\n          <div\n            className={\n              appState.sortBy.name\n                ? 'active'\n                : ''\n            }\n            onClick={() =>\n              updateSortbyByNamePrice(\n                APP_CONSTANTS.SORT_BY\n                  .NAME\n              )\n            }\n          >\n            {' '}\n            {\n              APP_CONSTANTS\n                .SORT_BY_LABELS\n                .SORT_BY_NAME\n            }\n          </div>\n          <div\n            className={\n              appState.sortBy.price\n                ? 'active'\n                : ''\n            }\n            onClick={() =>\n              updateSortbyByNamePrice(\n                APP_CONSTANTS.SORT_BY\n                  .PRICE\n              )\n            }\n          >\n            {' '}\n            {\n              APP_CONSTANTS\n                .SORT_BY_LABELS\n                .SORT_BY_PRICE\n            }\n          </div>\n        </div>\n      </div>\n      <div className='hotel-list'>\n        {hotelList}\n      </div>\n    </div>\n  );\n};\n","import {\n  ChangeEvent,\n  useEffect,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getHotelList } from '../../../actions/RootActions';\nimport { APP_CONSTANTS } from '../../../appConstants';\nimport {\n  addDays,\n  getToday,\n  toDateIsVaid,\n} from '../../../helpers';\nimport {\n  ActionsEnum,\n  AppState,\n} from '../../../types';\nimport './SearchForm.scss';\n\n/**\n * SearchFrom, is the definition of our inpuit component,\n * which will be used to select the date range type \n * and trigger search.\n * \n * @param {AppState} appState - first param\n * \n * @return {JSX.Element}\n */\nexport const SearchFrom = (\n  appState: AppState\n) => {\n  const dispatch = useDispatch();\n  const fromDate = appState?.fromDate\n    ? appState.fromDate\n    : getToday();\n  const toDate = appState?.toDate\n    ? appState.toDate\n    : addDays(appState.fromDate, 1);\n\n  useEffect(() => {\n    setToDate();\n  }, [fromDate]);\n\n  /**\n   *\n   * `setToDate` function will  set the todate\n   * based on fromDate.\n   *\n   * @returns {void}\n   *\n   */\n  const setToDate = (): void => {\n    if (\n      !toDateIsVaid(\n        appState.fromDate,\n        appState.toDate\n      )\n    )\n      dispatch({\n        type:\n          ActionsEnum.UPDATE_TO_DATE,\n        payload: {\n          toDate: addDays(\n            appState.fromDate,\n            1\n          ),\n        },\n      });\n  };\n\n  /**\n   *\n   * `updateFromDate` function will  set the fromDate\n   * based on date input value.\n   *\n   * @param {ChangeEvent<HTMLInputElement>} event as first param\n   *\n   * @returns {void}\n   *\n   */\n  const updateFromDate = (\n    event: ChangeEvent<HTMLInputElement>\n  ): void => {\n    dispatch({\n      type:\n        ActionsEnum.UPDATE_FROM_DATE,\n      payload: {\n        fromDate: event?.target?.value,\n      },\n    });\n  };\n\n  /**\n   *\n   * `updateTotDate` function will  set the todate\n   * based on date input value.\n   *\n   * @param {ChangeEvent<HTMLInputElement>} event as first param\n   *\n   * @returns {void}\n   *\n   */\n  const updateTotDate = (\n    event: ChangeEvent<HTMLInputElement>\n  ): void => {\n    dispatch({\n      type: ActionsEnum.UPDATE_TO_DATE,\n      payload: {\n        toDate: event?.target?.value,\n      },\n    });\n  };\n\n  /**\n   *\n   * `triggerSearch` function will dispatch an event\n   * for triggering api call.\n   *\n   * @returns {void}\n   *\n   */\n  const triggerSearch = (): void => {\n    dispatch(\n      getHotelList(\n        appState?.fromDate,\n        appState?.toDate\n      )\n    );\n  };\n\n  return (\n    <div className='search-container'>\n      <div>\n        <span>\n          {APP_CONSTANTS.SEARCH.FROM}\n        </span>\n        <input\n          type='date'\n          id='start'\n          name='from-date'\n          value={fromDate}\n          onChange={updateFromDate}\n          min='2018-05-05'\n          max='2021-12-31'\n        ></input>\n      </div>\n      <div>\n        <span>\n          {APP_CONSTANTS.SEARCH.TO}\n        </span>{' '}\n        <input\n          type='date'\n          id='end'\n          name='to-date'\n          value={toDate}\n          onChange={updateTotDate}\n          readOnly={\n            fromDate ? false : true\n          }\n          min={fromDate}\n          max='2021-12-31'\n        ></input>\n      </div>\n      <div>\n        <input\n          disabled={\n            !toDateIsVaid(\n              appState.fromDate,\n              appState.toDate\n            )\n          }\n          type='button'\n          value='Search'\n          onClick={triggerSearch}\n        />\n      </div>\n    </div>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { AppState } from '../../types';\nimport { HotelFilter } from './filters/HotelFilters';\nimport { HotelList } from './hotel-list/HotelList';\nimport { SearchFrom } from './search/SearchForm';\nimport EmptyResult from '../common/empty-result/EmptyResult';\nimport './Hotels.scss';\n\nexport const Hotels = () => {\n  const appState = useSelector(\n    (state: AppState) => state\n  );\n\n  const emptyResult =\n    !appState?.isLoading &&\n    appState?.hotelList?.length === 0 &&\n    appState?.fromDate &&\n    appState?.toDate ? (\n      <EmptyResult />\n    ) : (\n      ''\n    );\n\n  return (\n    <div>\n      <SearchFrom\n        {...appState}\n      ></SearchFrom>\n      {appState?.hotelList?.length >\n        0 && (\n        <div className='search-result-container'>\n          <div>\n            <HotelFilter\n              {...appState}\n            ></HotelFilter>\n          </div>\n          <div>\n            <HotelList\n              {...appState}\n            ></HotelList>\n          </div>\n        </div>\n      )}\n      {emptyResult}\n    </div>\n  );\n};\n","import React from 'react';\nimport { APP_CONSTANTS } from '../../../appConstants';\nimport './ScssLoader.scss';\n\n/**\n *\n * `ScssLoader` component diplay while fetching data\n * from api or finding the result from store.\n *\n * @return {JSX.Element}\n *\n */\nconst ScssLoader = () => {\n  return (\n    <div className='loader'>\n      <div className='loading'></div>\n    </div>\n  );\n};\n\nexport default ScssLoader;\n","import React from 'react';\nimport './App.scss';\nimport { useSelector } from 'react-redux';\nimport { AppState } from './types';\nimport EmptyResult from './components/common/empty-result/EmptyResult';\nimport { Hotels } from './components/hotels/Hotels';\nimport ScssLoader from './components/common/loader/ScssLoader';\n\nconst App = () => {\n  const appState = useSelector(\n    (state: AppState) => state\n  );\n  const isEmptyResult: boolean =\n    appState?.hotelList?.length === 0 &&\n    !appState.isLoading &&\n    !!!appState?.error?.message;\n  const loader = appState.isLoading ? (\n    <ScssLoader />\n  ) : null;\n  const emptyResult = isEmptyResult ? (\n    <EmptyResult />\n  ) : null;\n\n  return (\n    <div className='App'>\n      <div className='container'>\n        <Hotels></Hotels>\n        {loader}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { AppState } from './types/state';\n\n/**\n * This will be the application initial state\n */\nexport const InitialState: AppState = {\n  isLoading: false,\n  error: {\n    hasError: false,\n    message:\n      'Please try after some time!',\n  },\n  fromDate: '',\n  toDate: '',\n  hotelList: [],\n  filters: {\n    hotelName: '',\n    hotelPrice: '',\n  },\n  sortBy: {\n    name: false,\n    price: false,\n  },\n  totalNumberOfNigts: 0,\n};\n","import {\n  createStore,\n  applyMiddleware,\n} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport {\n  persistStore,\n  persistReducer,\n} from 'redux-persist';\nimport localforage from 'localforage';\nimport { rootReducer } from './reducers/RootReducer';\nconst persistConfig = {\n  key: 'root',\n  storage: localforage,\n};\nconst persistedReducer = persistReducer(\n  persistConfig,\n  rootReducer\n);\nexport const store = createStore(\n  persistedReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\nexport const persistor = persistStore(store);\n","import { ActionsEnum } from '../types';\nimport { InitialState } from '../initialSate';\nimport { AppState } from '../types/state';\nimport {\n  filterHotelListbasedOnAvailableDate,\n  getNumberOfNight,\n} from '../helpers';\n/**\n *\n * `rootReducer` will handle the state manupoulatuon.\n *\n */\nexport const rootReducer = (\n  state: AppState = InitialState,\n  action: any\n): AppState => {\n  switch (action.type) {\n    case ActionsEnum.NETWORK_ERROR: {\n      return {\n        ...state,\n        isLoading: false,\n        hotelList: [],\n        error: {\n          hasError: true,\n          message:\n            'Please try After Some time',\n        },\n      };\n    }\n\n    case ActionsEnum.UPDATE_FROM_DATE: {\n      return {\n        ...state,\n        fromDate:\n          action.payload.fromDate,\n      };\n    }\n\n    case ActionsEnum.UPDATE_TO_DATE: {\n      return {\n        ...state,\n        toDate: action?.payload?.toDate,\n      };\n    }\n\n    case ActionsEnum.UPDATE_HOTEL_LIST: {\n      return {\n        ...state,\n        hotelList: filterHotelListbasedOnAvailableDate(\n          action?.payload?.hotelList,\n          state?.fromDate\n        ),\n        filters: {\n          hotelName: '',\n          hotelPrice: '',\n        },\n        sortBy: {\n          name: false,\n          price: false,\n        },\n        totalNumberOfNigts: getNumberOfNight(\n          action?.payload?.fromDate,\n          action?.payload?.toDate\n        ),\n      };\n    }\n\n    case ActionsEnum.UPDATE_FILTERS: {\n      return {\n        ...state,\n        filters: {\n          hotelName:\n            action?.payload?.filters\n              ?.hotelName,\n          hotelPrice:\n            action?.payload?.filters\n              ?.hotelPrice,\n        },\n      };\n    }\n\n    case ActionsEnum.UPDATE_SORT_BY: {\n      return {\n        ...state,\n        sortBy: {\n          name:\n            action?.payload?.sortBy\n              ?.name,\n          price:\n            action?.payload?.sortBy\n              ?.price,\n        },\n      };\n    }\n\n    case ActionsEnum.SHOW_LOADER: {\n      return {\n        ...state,\n        isLoading:\n          action?.payload?.loaderStatus,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate\n        loading={null}\n        persistor={persistor}\n      >\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { AxiosResponse } from 'axios';\nimport { Dispatch } from 'redux';\nimport { getHotels } from '../services/Api';\nimport {\n  ActionsEnum,\n  ActionType,\n  Filters,\n  GenericApiResponse,\n  Hotel,\n} from '../types';\n\n/**\n *\n * `getDataFromApi` action creator dipatch\n * afunction to the rootReducer.\n *\n * @param {string} searchText - first input as string\n * @param {string} searchType - second input as string\n *\n * @return will dipatch an event\n * to reducers for changing the sate.\n *\n */\nexport const getHotelList = (\n  fromDate: string,\n  toDate: string\n) => async (\n  dispatch: Dispatch<ActionType>\n) => {\n  isShowLoader(dispatch, true);\n  dispatch({\n    type: ActionsEnum.UPDATE_HOTEL_LIST,\n    payload: {\n      hotelList: [],\n    },\n  });\n  try {\n    const apiResponse = (await getHotels()) as AxiosResponse<\n      GenericApiResponse<Hotel[]>\n    >;\n    const hotelList = eval(\n      apiResponse.data.toString()\n    );\n    dispatch({\n      type:\n        ActionsEnum.UPDATE_HOTEL_LIST,\n      payload: {\n        hotelList,\n        fromDate: fromDate,\n        toDate: toDate,\n      },\n    });\n    isShowLoader(dispatch, false);\n  } catch (e) {\n    isShowLoader(dispatch, false);\n    dispatch({\n      type: ActionsEnum.NETWORK_ERROR,\n      payload: null,\n    });\n  }\n};\n\n/**\n *\n * `updateFilters` action creator dipatch\n * afunction to the rootReducer.\n *\n * @param {Filters} filters - first input as string\n *\n * @return will dipatch an event to\n * reducers for changing the sate.\n *\n */\nexport const updateFilters = (\n  filters: Filters\n) => async (\n  dispatch: Dispatch<ActionType>\n) => {\n  dispatch({\n    type: ActionsEnum.UPDATE_FILTERS,\n    payload: {\n      filters: {\n        hotelName: filters?.hotelName,\n        hotelPrice: filters?.hotelPrice,\n      },\n    },\n  });\n};\n\n/**\n *\n * `updateSortBy` action creator dipatch\n * a function to the rootReducer.\n *\n * @param {string} key - first input as string\n *\n * @return will dipatch an event to\n * reducers for changing the sate.\n *\n */\nexport const updateSortBy = (\n  key: string\n) => async (\n  dispatch: Dispatch<ActionType>\n) => {\n  dispatch({\n    type: ActionsEnum.UPDATE_SORT_BY,\n    payload: {\n      sortBy: {\n        name:\n          key === 'name' ? true : false,\n        price:\n          key === 'price'\n            ? true\n            : false,\n      },\n    },\n  });\n};\n\n/**\n *\n * `isShowLoader` action creator dipatch\n * a function to the rootReducer.\n *\n *@param {Dispatch<ActionType>} dispatch - first input as string\n * @param {boolean} loaderStatus - first input as string\n *\n * @return will dipatch an event\n * to reducers for changing the sate.\n *\n */\nconst isShowLoader = (\n  dispatch: Dispatch<ActionType>,\n  loaderStatus: boolean\n) => {\n  dispatch({\n    type: ActionsEnum.SHOW_LOADER,\n    payload: {\n      loaderStatus,\n    },\n  });\n};\n"],"sourceRoot":""}